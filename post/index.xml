<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 元昊的博客</title>
    <link>https://ncjdjyh.github.io/post/</link>
    <description>Recent content in Posts on 元昊的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>All rights reserved - 2019</copyright>
    <lastBuildDate>Thu, 31 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ncjdjyh.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020年度总结</title>
      <link>https://ncjdjyh.github.io/2020/12/31/2020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ncjdjyh.github.io/2020/12/31/2020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</guid>
      <description>现在是2020.12.31晚9点，几小时后2020就要结束了，我边看bilibili最美的夜边写2020年度总结。给自己平平淡淡的一年画上句号，也为新的一年书写序章。
工作 今年算是正式工作的的第二个年头了，收获了很多可爱的同事，也遭到了意料中的社会毒打，无数个不眠的夜晚给我的心灵造成了严重的创伤，这段岁月甚至可以称之为中古时光。刚走出象牙塔不久的我体会到了生活的不易，也理解了为什么都说你现在过的这么轻松是有人在为你负重前行。
 造成了一次重大事故(mv 了服务器根目录)，领导和组长都没有责怪我只是积极解决问题，非常感谢也非常感动，算是给我短暂职业生涯上的重要一课。今后一定要更谨慎些。 ps:现在看到mv指令都发憷
 沟通能力与表达能力有较大的提高，同事关系能处理得比较融洽，工作完成情况也算是差强人意。 但对情绪的控制比较差，抗压能力也不够好，多线程工作容易宕机 ~。
 一方面学生到社会人身份的转换比较顺利，&amp;rdquo;美好的&amp;rdquo;学生思维也被中古时光痛苦的工作消磨得所剩无几，对资本家的&amp;rdquo;饼&amp;rdquo;有了本能的抵触。另一方面人际交往方面还是不够主动，在推杯换盏的场合会极度不适，我清楚个性想要有所改变是及其困难的。也慢慢学会了适应孤独享受孤独，但还是希望自己在新的一年里能更勇敢些，毕竟壮志雄心是一个男子汉的重要特质。
  英语 对目前国内互联网工作氛围感到害怕，有尝试外企的计划。11月开始计划学英语，目前是通过以下途径，第一个是背单词，这算是坚持的比较好的，截止到今天是第39天，感觉默默背单词这个软件的体验挺不错。效果也很好。能继续保持最好了。

第二个是学习Daily English Dictation一套被很多大佬安利练习口语的课程，质量确实很高，制作精良，内容翔实。但是很惭愧简直目前只听了3课，说好听点是时间不够，不好听就是偷懒。这是明年要改善的。再有就是平时多营造英语氛围，比如在工作中常用英文关键词检索，多阅读英文技术文档等。
投资 这算是自己今年较大的改变，一年前还谈股色变的我今年也在投资中尝到了些许甜头。不得不说环境对人的影响是巨大的，今年年初在同事熏陶和书籍浸染(穷爸爸富爸爸入坑神书)的双重攻势下下我迈出了第一步(就200快)，从投着玩到逐渐认识到了投资的重要性，也慢慢形成了自己的投资经验与理念。市场也是很给面子，今年最后一个交易日也是大丰收晒下收益 - -！
 支付宝  
 且慢  
也是今年行情好诶，躺着都能把钱挣了，挺开心。虽然杯水车薪，但投资有个很重要的概念叫复利效应，预感金光闪闪的 millionaire 就快要诞生了。
阅读 我不算是一个爱读书的人，但我一查，很快啊！我就发现据统计中国人均年阅读量只有4.67本，那我也算没给祖国扯后腿了，那就随便写一下，很讲武德，今年我自己阅读书籍的TOP1我颁给《大国大城》这本书对于我这样一个经济小白来说可以说是颠覆三观。对许多社会现象，比如工业化城市化的关系、房价的解释与论证鞭辟入里，文笔也是风趣幽默、平易近人。阅读的重要性就不用多说了，罗翔老师说过阅读要多做非功利性阅读，我觉得很有道理。豆瓣收藏夹现在已经囤积了大量的书籍，数量能凑几桌麻将了，希望2021年能多读几本 ~ ~。
吉他 由于说不清道不明的原因，这门大学时期习得的传统手艺已经荒废多时，直到最近才有时间将它重新拾起，录了点音频自我欣赏，以前能弹的押尾桑的曲子如今已经忘得一干二净了。指弹果然还是太小众，玩不来，打算弃坑了。新的一年要再接再厉争取多学会几首周杰伦的曲子！
技术 我把它放到最后是因为于心有愧，今年在技术上没啥建树，除了工作的项目，其他的项目确实是乏善可陈，由于各种各样原因中道崩殂。
编辑器 × 难度太高，放弃
投资软件 × 概念阶段
节拍器 × 空想阶段
&amp;hellip;

只有这仨没有实际价值的玩具算是贫瘠技术土壤的一点点缀。
2021一个比较像要做的事是知识进行一定的输出，包括但不限于阅读感悟和技术分享，但这个计划实施起来可能会有比较大的阻碍，主要是心理建设上， 向来比较恐惧做这样的事情，以前怕，现在怕，将来很可能也会怕，但人总要进步嘛。
不管怎么说 2020 已经过去了，希望 2021 世界和平，自己更开心、更可爱。</description>
    </item>
    
    <item>
      <title>ARTS WEEK 5</title>
      <link>https://ncjdjyh.github.io/2020/10/25/arts-week-5/</link>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ncjdjyh.github.io/2020/10/25/arts-week-5/</guid>
      <description>Algorithm LeetCode 146 LRU缓存 https://leetcode-cn.com/problems/lru-cache/
Review Database Sharding
https://medium.com/system-design-blog/database-sharding-69f3f4bd96db
Tips 三元表达式 autoboxing 导致的 npe 问题
问题代码大概长这样:
public class AutoboxingNPE { public static void main(String[] args) { boolean b = false; Double d1 = 0d; Double d2 = null; Double d = b ? d1.doubleValue() : d2; } }  乍一看似乎这段代码没有什么问题, 但运行后会发生诡异的 NPE 异常, 原因是三目运算符左右表达式在类型对齐时, 产生了自动拆箱的操作. 使用 JclassLab 反编译后结果如下

从以上结果我们可以猜测三元表达式的行为: 三目运算符只要后面两个是不同的类型，涉及到类型转换，那么编译器就会向下（基本类型）进行转型，再进行计算. AutoboxingNPE字节码在24行发生了拆箱操作, 即等价于执行了 double b = null 造成 NPE</description>
    </item>
    
    <item>
      <title>ARTS WEEK 4</title>
      <link>https://ncjdjyh.github.io/2020/10/11/arts-week-4/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ncjdjyh.github.io/2020/10/11/arts-week-4/</guid>
      <description>Algorithm LeetCode 142 环形链表II https://leetcode-cn.com/problems/linked-list-cycle-ii/
Review Database Sharding
https://medium.com/system-design-blog/database-sharding-69f3f4bd96db
 数据库分片优势
 高可用性 更快的查询效率 提高写带宽 便于拓展  数据库分片缺点
 增加系统复杂度 增加平衡数据的格外开销 从各个 shard 中取出数据再进行合并 额外的数据合并开销 缺少数据库原生支持  数据库分片方式
 Key Based Sharding Range Based Sharding Directory Based Sharding   一致性 hash 算法可以解决 Key Based Sharding 的服务扩缩容问题 也是目前使用比较多的
Tips 记一次线程池使用不当导致的内存泄露
最近发生了一次线上问题(我的锅dog) ExecutorService 的错误使用, 是比较常见的线程问题 这里简单介绍下, 隐藏相关业务细节代码逻辑大概是这样  这里有两个比较严重的错误 首先, 在方法里创建新的线程池通常是不合适的, 使用线程池的原因是为了线程可以服用, 这样不能达到目的 其次, 线程池使用完了以后没有 shutdown 多次调用方法后大量的线程创建导致内存泄露.
使用 jstack dump 堆栈信息后发现产生100个线程</description>
    </item>
    
    <item>
      <title>ARTS WEEK 3</title>
      <link>https://ncjdjyh.github.io/2020/09/20/arts-week-3/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ncjdjyh.github.io/2020/09/20/arts-week-3/</guid>
      <description>Algorithm LeetCode 236 236. 二叉树的最近公共祖先
Review Database Sharding
https://medium.com/system-design-blog/database-sharding-69f3f4bd96db
 数据库分片优势
 高可用性 更快的查询效率 提高写带宽 便于拓展  数据库分片缺点
 增加系统复杂度 增加平衡数据的格外开销 从各个 shard 中取出数据再进行合并 额外的数据合并开销 缺少数据库原生支持  数据库分片方式
 Key Based Sharding Range Based Sharding Directory Based Sharding   一致性 hash 算法可以解决 Key Based Sharding 的服务扩缩容问题 也是目前使用比较多的
Tips CAS实现同步流水号生成
Share Domain-Driven Design: Everything You Always Wanted to Know About it, But Were Afraid to Ask
https://medium.com/ssense-tech/domain-driven-design-everything-you-always-wanted-to-know-about-it-but-were-afraid-to-ask-a85e7b74497a</description>
    </item>
    
    <item>
      <title>ARTS WEEK 2</title>
      <link>https://ncjdjyh.github.io/2020/09/13/arts-week-2/</link>
      <pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ncjdjyh.github.io/2020/09/13/arts-week-2/</guid>
      <description>Algorithm LeetCode 238 除自身以外数组的乘积
Review 7 Skills of Highly Effective Programmers
https://medium.com/better-programming/7-habits-of-highly-effective-programmers-563ee3b63f33
 学会阅读别人的代码 不要害怕阅读烂代码 读多了不好的代码你会知道怎样的代码是可读性高的可维护性好的 对不好的系统有知觉 管理会议避免无意义的开会文中提到两个方法(1)每天留出时间开会 (2)比其他人早到 感觉这两个方法没有什么用 学会使用 git 不要过度优化 学会拒绝 给工作排优先级 为未来考虑 (1)在设计一个复杂模块时先设想一下未来用户会如何错误的使用你的系统 (2)实现一个方法之前考虑一下方法的可复用性 未来可能会有许多别的程序员使用你的方法  Tips Spring Boot 继承 WebService
Share The S.O.L.I.D Principles in Pictures 介绍设计模式原则
https://medium.com/backticks-tildes/the-s-o-l-i-d-principles-in-pictures-b34ce2f1e898</description>
    </item>
    
    <item>
      <title>ARTS WEEK 1</title>
      <link>https://ncjdjyh.github.io/2020/09/07/arts-week-1/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ncjdjyh.github.io/2020/09/07/arts-week-1/</guid>
      <description>Algorithm LeetCode 59 螺旋矩阵 II
Review Machine Learning Is Fun! (https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471)
一. 概述 机器学习思想是给定一个通用算法模型, 对于同类问题不需要编写特定的代码只需要提供数据, 它就会根据数据构建逻辑得到结果 比如常见的分类算法可以用它区分手写体数字, 也可以用它区分一封邮件是否是垃圾邮件, 也可以区分一个生物是狗还是猫
二: 分类 监督学习(supervised learning) 你知道怎样做 你告诉计算机应该怎样做 非监督学习(unsupervised learning) 你也不知道怎样做 你让计算机学着自己去做
三: 目前发展现状 强人工智能想要实现的目标是复制人类对任意问题的学习与处理能力 目前的机器学习其实并不能真正的学习 只能解决特定的问题
四: 线性回归思路与步骤 这里是以监督学习举例的, 首先你需要有一些样本, 样本包含了最终结果与影响结果的各个因子的关系, 首先将各个因子的权重都设置为1通过计算得到一个估值比较估值与样本真实值的差距并不断调整估值, 直到估值与真实值的差距缩小到一定范围内, 即找到了所需权重.
Tips  使用 Redis zset 实现异步查询任务 需求背景: 估价查询接口 每次查询为一个查询任务需要预计 30 分钟才能返回估价结果 实现方法 zset(value: 任务id score: 时间戳) 每 30 分钟启动一个定时任务, 查询已完成的任务 zrange(key, currentTimestmp - 1hour, currentTimestmp - 30min)  Share MDN CORS 原理</description>
    </item>
    
    <item>
      <title>基于Spring Cloud Alibaba OAuth2的简易RBAC管理系统</title>
      <link>https://ncjdjyh.github.io/2019/08/09/%E5%9F%BA%E4%BA%8Espring-cloud-alibaba-oauth2%E7%9A%84%E7%AE%80%E6%98%93rbac%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 09 Aug 2019 16:25:35 +0800</pubDate>
      
      <guid>https://ncjdjyh.github.io/2019/08/09/%E5%9F%BA%E4%BA%8Espring-cloud-alibaba-oauth2%E7%9A%84%E7%AE%80%E6%98%93rbac%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</guid>
      <description>背景 这篇文章主要用来记录笔本人学习和搭建该系统的问题和收获。阅读这篇文章需要对OAuth2协议和Spring Security有一定的了解。关于OAuth2，其实是一个鉴权与授权的规范（如果你还不清楚授权服务器，资源服务器，认证授权等基础概念，可以移步理解OAuth 2.0 - 阮一峰）这里我简单列举一个场景说明授权码模式(authorization code)的使用。比如现在我想使用QQ登录bilibili。


OAuth 2.0的运行流程如下图：

 Client: 第三方应用程序，在这里其实就是bilibili User Agent：这里指我的Chrome浏览器 Resource Owner：资源所有者，这里指的是我自己 Authorization server：认证服务器，这里指QQ的认证服务器 Resource Server：资源服务器，即服务提供商存放用户生成的资源的服务器。  在这个例子中：腾讯当然不希望你在登录B站的过程中暴露了QQ的账号和密码，OAuth就是为了解决这样的问题而出现的，它设置了一个授权层，客户端不能直接登录服务提供者，只能登录授权层，通过获取授权码(即图中的AccessToken)的方式来访问资源服务器的资源。
有很多安全框架(Shiro Spring Security)都可以实现OAuth2规范，本文使用Spring Security对它进行实现。
架构图 客户端的请求是通过网关(Gateway Service)以http协议来传输信息，网关调用一个统一的授权服务器(Auth Service)验证用户信息并返回一个用来访问资源的授权码(AccessToken)，在鉴权服务的搭建上采用了OAuth2认证的密码授权模式而没有使用OAuth中最为严密的授权码模式，原因除了简单以外还因为这是一个只存在内部调用的内部系统。在该系统中除了网关服务和授权服务，其他的所有服务都可以看成是资源服务(Resource Server)，他们都受到Spring Security的保护且通过授权码来访问资源，服务间使用Fegin来相互调用Fegin使用http访问其他内部服务,除了http通信方式外，在分布式系统中各个服务间也经常使用RPC通信方式,阿里的Dubbo和Google的gRPC都是这样的网络通信框架。笔者基于Netty实现了一个很简单的RPC工具：源码。
服务配置中心 Spring Cloud Alibaba使用nacos作为配置中心，所以首先需要搭建配置中心服务器，具体的方法可以参考官方
文档这是成功后的效果。
然后当一个服务启动的时候将其注册到配置中心中，我的配置如下
spring.application.name=gateway-service spring.cloud.nacos.config.file-extension=yaml spring.cloud.nacos.config.server-addr=localhost:8848 spring.cloud.nacos.config.group=DEFAULT_GROUP  网关(gateway-service) 网关使用Spring Cloud Gateway实现服务路由。使用lb://服务名配置路由表可以轻松实现基于Ribbion的负载均衡，更多配置可以参考这里，我的配置如下：
spring: main: web-application-type: none application: name: gateway-service datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.164:3306/oauth2?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;zeroDateTimeBehavior=convertToNull&amp;amp;serverTimezone=GMT username: root password: root type: com.alibaba.druid.pool.DruidDataSource cloud: nacos: discovery: server-addr: 192.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ncjdjyh.github.io/2019/08/05/about/</link>
      <pubDate>Mon, 05 Aug 2019 16:56:57 +0800</pubDate>
      
      <guid>https://ncjdjyh.github.io/2019/08/05/about/</guid>
      <description>Nothing.</description>
    </item>
    
    <item>
      <title>我的第一个编程语言</title>
      <link>https://ncjdjyh.github.io/2018/10/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Fri, 05 Oct 2018 16:43:01 +0800</pubDate>
      
      <guid>https://ncjdjyh.github.io/2018/10/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid>
      <description>开篇 很久以前就想拥有一个自己的编程语言, 当看到计算机精确无误的将一行行代码翻译为正确的结果时, 我不禁感叹它的智慧, 但聪明的其实不是计算机, 计算机只是一个取值执行的部件, 是程序语言的设计者赋予了它这样的魔力, 能够根据我们的需要完成特定的事情, 这才是智慧的体现.
实现一个解释器往往是程序语言设计的第一步, 而跨出了这一步往往会修正自己作为程序员的看法, 现在你将自己看成了语言的设计师, 而不仅仅是语言的使用者.
YHScheme 虽然只是一个很简单的玩具语言, 但是也涵盖程序中最基本的构造(算数, 变量, 绑定, 调用, 递归)
 可以看到 YHScheme 解释的主要作用只是将源码转化为了java编译器能够识别的java代码而已，后面的事情就交给 JVM 来完成了。
表达式 和其他lisp方言一样, YHScheme 采用前缀表达式
;这是常见的中缀表达式 (1 + 2 + 3) ;这是前缀表达式 (+ (+ 1 2) 3) ;这是后缀表达式 ((1 2 +) 3 +) 更多表达式的知识可以参考这里
YHScheme 语法 ;算数 &amp;gt; &amp;gt; (+ 2 3 4) &amp;gt; &amp;gt; 9 &amp;gt; &amp;gt; (* 2 (+ 2 2)) &amp;gt; &amp;gt; 8 ;逻辑 &amp;gt; &amp;gt; (&amp;gt; 1 2) &amp;gt; &amp;gt; false &amp;gt; &amp;gt; (= 1 1) &amp;gt; &amp;gt; true ;高阶过程 &amp;gt; &amp;gt; (def (square x) (* x x)) &amp;gt; &amp;gt; ok &amp;gt; &amp;gt; (def (sum-of-square f x y) (+ (f x) (f y))) &amp;gt; &amp;gt; ok &amp;gt; &amp;gt; (sum-of-square square 2 3) &amp;gt; &amp;gt; 13 ;递归 &amp;gt; &amp;gt; (def (fact n) (if (= n 1) 1 (* n (f (- n 1))))) &amp;gt; &amp;gt; ok &amp;gt; &amp;gt; (fact 5) &amp;gt; &amp;gt; 120 ;匿名过程 &amp;gt; &amp;gt; (((lambda(x) (lambda(y) (+ x y)))2)3)  词法分析 词法分析是将字符序列转换为单词（Token）序列的过程, 前面说过 YHScheme 采用了前缀表达式, 那么采用像这样的前缀表达式有什么好处呢?</description>
    </item>
    
    <item>
      <title>知识输出的方式</title>
      <link>https://ncjdjyh.github.io/2010/12/30/%E7%9F%A5%E8%AF%86%E8%BE%93%E5%87%BA%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 30 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://ncjdjyh.github.io/2010/12/30/%E7%9F%A5%E8%AF%86%E8%BE%93%E5%87%BA%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>最近在读《博弈论到底是什么》，其中有一个观点说到博弈论这样的理论是“文章本天成，妙手偶得知”，觉得挺有道理，私以为知识的输出大体上可分为这样几种方式。
总结：总结也就是博采众家之长，很多人对“最佳实践”这个词不会陌生，他便是对“总结型方式”很好的解释，以软工程为例，人们在日常的工作中会总结大量的经验，这些经验通过多次有效性与生产实践的验证逐渐转化为完成特定事物的方法论。这样的方法论经过推广，在互联网的土壤上生根发芽，会让更多的人使用并完善理论，在这个过程中，各种思想相互沾染、碰撞就产生了影响力，由此一来形成了一个良性的闭环，使用量的增加扩大了影响力，而影响力的的增强又反哺最初的论点使其更加成熟，最终形成行业的最佳实践。
庖丁解牛：将深奥的知识变简单从来不是一件容易的事，自己吸收知识与将知识拆散揉碎了传授给他人是两个完全不同的东西。这也是为什么教育能被当成一门研究课题，“曲高和寡”的故事在如今的社会中也时有发生，《三傻大闹宝莱坞》里的教授是学术专家但讲出来的课程却晦涩难懂，他们或许学术水平很高但并未领会教育的真谛。了解点计算机史的人肯定都听说过“图灵机”但λ演算(lambda expression)就不一定了，它们都解决了同样的问题，根据 “奥卡姆剃刀原理” λ演算甚至更胜一筹，但“图灵机”却在历史长河中留下了更深的烙印。这就是“庖丁解牛”的价值，能让不明白艰深数学原理的人也能领优(nan)雅(dong)的计算机理论。
创造：与总结型不同，创造型通常是完成了事物从无到有的开创新工作，牛顿凭借自己的聪明才智构建了经典物理的大厦，这样划时代的工作启迪了无数后来的科学家。爱因斯坦一篇精彩绝伦的《论动体的电动力学》让这个26岁的年轻人从此屹立于物理界的浪潮之巅，也敲开了微观物理的大门。
这三种方式并无高下，完成开创性工作或许是最困难、最需要天赋的，但并不意味着就一定是最好的，这些时代弄潮儿固然才华横溢， 但化繁为简的能工巧匠同样值得我们尊敬，这样一个把“厚书读薄”的过程自然极具现实意义。</description>
    </item>
    
  </channel>
</rss>